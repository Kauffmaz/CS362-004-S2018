        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "assert.h"
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:int testAssert(int, int);
        -:    9:void analyzeResults(int);
        -:   10:typedef enum { false = 0,
        -:   11:               true = 1 } boolean;
        -:   12:int MIN_HAND, totalTests, passedTests, failedTests = 0;
        -:   13:int passed = true;
        -:   14:
function main called 1 returned 100% blocks executed 97%
        1:   15:int main()
        -:   16:{
        -:   17:    struct gameState game;
        -:   18:    
        -:   19:    int result, i;
        1:   20:    int k[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        -:   21:
        1:   22:    initializeGame(2, k, 2, &game);
call    0 returned 100%
        -:   23:
        -:   24:    //testing isGameOver for number of province > 0
        -:   25:    //expecting isGameOver to return 0
      500:   26:    for (i = 1; i < MAX_DECK; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   27:    {
      499:   28:        game.supplyCount[province] = i;
      499:   29:        result = testAssert(0, isGameOver(&game));
call    0 returned 100%
call    1 returned 100%
      499:   30:        analyzeResults(result);
call    0 returned 100%
        -:   31:    }
        -:   32:
        -:   33:    //testing province == 0
        -:   34:    //expecting isGameOver to return 1
        1:   35:    game.supplyCount[province] = 0;
        1:   36:    result = testAssert(1, isGameOver(&game));
call    0 returned 100%
call    1 returned 100%
        1:   37:    analyzeResults(result);
call    0 returned 100%
        -:   38:
        -:   39:    //testing supply piles full
        -:   40:    //expecting isGameOver to return 0
       13:   41:    for (i = 0; i < 12; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:   42:    {
       12:   43:        game.supplyCount[i] = 5;
        -:   44:    }
        1:   45:    game.supplyCount[province] = 5;
        1:   46:    result = testAssert(0, isGameOver(&game));
call    0 returned 100%
call    1 returned 100%
        1:   47:    analyzeResults(result);
call    0 returned 100%
        -:   48:
        -:   49:    //testing 1, 2 supply piles empty
        -:   50:    //expecting isGameOver to return 0
        3:   51:    for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   52:    {
        2:   53:        game.supplyCount[i] = 0;
        2:   54:        result = testAssert(0, isGameOver(&game));
call    0 returned 100%
call    1 returned 100%
        2:   55:        analyzeResults(result);
call    0 returned 100%
        -:   56:    }
        -:   57:    
        -:   58:    //testing 3 supply piles empty
        -:   59:    //expecting isGameOver to return 1
       13:   60:    for (i = 0; i < 12; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:   61:    {   
       12:   62:        if(i < 3){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        3:   63:            game.supplyCount[i] = 0;
        -:   64:        }
        -:   65:        else{
        9:   66:            game.supplyCount[i] = 5;
        -:   67:        }
        -:   68:    }
        1:   69:    result = testAssert(1, isGameOver(&game));
call    0 returned 100%
call    1 returned 100%
        1:   70:    analyzeResults(result);
call    0 returned 100%
        -:   71:
        1:   72:    if (passed == true)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   73:    {
        1:   74:        printf("Tests passed\n");
call    0 returned 100%
        -:   75:    }
        -:   76:    else
        -:   77:    {
    #####:   78:        printf("Tests failed\n");
call    0 never executed
        -:   79:    }
        -:   80:
        -:   81:
        1:   82:    return 0;
        -:   83:}
        -:   84:
function testAssert called 504 returned 100% blocks executed 100%
      504:   85:int testAssert(int expected, int actual)
        -:   86:{
      504:   87:    return expected == actual;
        -:   88:}
        -:   89:
function analyzeResults called 504 returned 100% blocks executed 67%
      504:   90:void analyzeResults(int result)
        -:   91:{
      504:   92:    if (result == false){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   93:        passed = false;
        -:   94:    }
      504:   95:}
        -:   96:// int isGameOver(struct gameState *state) {
        -:   97://   int i;
        -:   98://   int j;
        -:   99:
        -:  100://   //if stack of Province cards is empty, the game ends
        -:  101://   if (state->supplyCount[province] == 0)
        -:  102://     {
        -:  103://       return 1;
        -:  104://     }
        -:  105:
        -:  106://   //if three supply pile are at 0, the game ends
        -:  107://   j = 0;
        -:  108://   for (i = 0; i < 25; i++)
        -:  109://     {
        -:  110://       if (state->supplyCount[i] == 0)
        -:  111:// 	{
        -:  112:// 	  j++;
        -:  113:// 	}
        -:  114://     }
        -:  115://   if ( j >= 3)
        -:  116://     {
        -:  117://       return 1;
        -:  118://     }
        -:  119:
        -:  120://   return 0;
        -:  121:// }
