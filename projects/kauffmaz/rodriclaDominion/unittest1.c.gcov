        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "assert.h"
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:int testAssert(int, int);
        -:    9:typedef enum {false = 0, true = 1} boolean;
        -:   10:
function main called 1 returned 100% blocks executed 89%
        1:   11:int main(){
        -:   12:	struct gameState game;
        1:   13:	int passed = true;
        1:   14:    int totalTests, passedTests, failedTests = 0;	
        -:   15:    int result, i;
        -:   16:
        -:   17:
        -:   18:    //testing all expected hand sizes
      501:   19:    for(i = 0; i < MAX_HAND; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      500:   20:        game.handCount[0] = i;
      500:   21:        result = testAssert(i, numHandCards(&game));
call    0 returned 100%
call    1 returned 100%
      500:   22:        if(result == false){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   23:            passed = false;
    #####:   24:            failedTests++;
        -:   25:        }
        -:   26:        else{
      500:   27:            passedTests++;
        -:   28:        }
      500:   29:        totalTests++;
        -:   30:    }
        -:   31:    //testing negative hand sizes
      501:   32:    for(i = -500; i < 0; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      500:   33:        game.handCount[0] = i;
      500:   34:        result = testAssert(i, numHandCards(&game));
call    0 returned 100%
call    1 returned 100%
      500:   35:        if(result == false){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   36:            passed = false;
    #####:   37:            failedTests++;
        -:   38:        }
        -:   39:        else{
      500:   40:            passedTests++;
        -:   41:        }
      500:   42:        totalTests++;
        -:   43:    }
        -:   44:    //testing cases that should fail
      501:   45:    for(i = 0; i < MAX_HAND; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      500:   46:        game.handCount[0] = i + 1;
      500:   47:        result = testAssert(i, numHandCards(&game));
call    0 returned 100%
call    1 returned 100%
      500:   48:        if(result == false){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      500:   49:            passed = true;
        -:   50:        }
        -:   51:        
        -:   52:    }
        -:   53:   
        1:   54:	if(passed == true){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   55:        printf("ALL TESTS PASSED\n");
call    0 returned 100%
        -:   56:    }
        -:   57:    else{
    #####:   58:        printf("TEST FAILED\n");
call    0 never executed
        -:   59:    }
        1:   60:	return 0;
        -:   61:}
        -:   62:
function testAssert called 1500 returned 100% blocks executed 100%
     1500:   63:int testAssert(int expected, int actual){
     1500:   64:    return expected == actual;
        -:   65:}
        -:   66:
