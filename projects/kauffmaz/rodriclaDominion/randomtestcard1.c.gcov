        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "interface.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <assert.h>
        -:   10:#include <string.h>
        -:   11:
        -:   12:#define NUM_TESTS 5000
        -:   13:int smithyPos(int p, struct gameState *g);
        -:   14:typedef enum {false = 0, true = 1} boolean;
        -:   15:typedef struct gameState gameState;
        -:   16:
function main called 1 returned 100% blocks executed 98%
        1:   17:int main()
        -:   18:{
        -:   19:    int passedTests, failedTests;
        1:   20:    int cards[10] = {minion, mine, cutpurse, sea_hag, tribute, smithy, adventurer, gardens, embargo, village};
        -:   21:    int i, player, players, randomSeed, count;
        -:   22:    
        -:   23:
        1:   24:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   25:
        -:   26:    gameState startState;
        -:   27:    gameState endState;
        1:   28:    passedTests = 0;
        1:   29:    failedTests = 0;
        1:   30:    count = 0;
        -:   31:
        1:   32:    printf("\n ***Smithy TEST*** \n");
call    0 returned 100%
        -:   33:
     5001:   34:    for (i = 0; i < NUM_TESTS; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   35:    {
     5000:   36:        printf("Test #%d\n", i);
call    0 returned 100%
     5000:   37:        count++;
     5000:   38:        randomSeed = rand() % 50 + 1;
call    0 returned 100%
     5000:   39:        players = rand() % 4 + 1;
call    0 returned 100%
     5000:   40:        int failure = false;
     5000:   41:        player = 1;
        -:   42:        
     5000:   43:        initializeGame(players, cards, randomSeed, &startState); 
call    0 returned 100%
        -:   44:            
        -:   45:        //randomize the hand/deck/discard piles
     5000:   46:        startState.handCount[1] = rand() % MAX_HAND;
call    0 returned 100%
     5000:   47:        startState.deckCount[1] = rand() % MAX_DECK;
call    0 returned 100%
     5000:   48:        startState.discardCount[1] = rand() % MAX_DECK;
call    0 returned 100%
        -:   49:        int k;
  1246753:   50:        for (k = 0; k <startState.deckCount[1]; k++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1241753:   51:            startState.deck[1][k] = rand() % 25;
call    0 returned 100%
        -:   52:        }
  1242542:   53:        for (k = 0; k <startState.discardCount[1]; k++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1237542:   54:            startState.discard[1][k] = rand() % 25;
call    0 returned 100%
        -:   55:        }
  1280658:   56:        for (k = 0; k <startState.handCount[1]; k++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1275658:   57:            startState.hand[1][k] = rand() % 25;
call    0 returned 100%
        -:   58:        }
        -:   59:
     5000:   60:        startState.whoseTurn = player; 
        -:   61:        // get the original hand count
        -:   62:
     5000:   63:        memcpy(&endState, &startState, sizeof(struct gameState));
        -:   64:        
     5000:   65:        int smithyLoc = smithyPos(player, &startState);
call    0 returned 100%
        -:   66:        //check if smithy is in the hand and if it is - play it
     5000:   67:        if (smithyLoc != -1){
branch  0 taken 96% (fallthrough)
branch  1 taken 5%
     4775:   68:            playCard(smithyLoc,0,0,0,&endState);
call    0 returned 100%
        -:   69:        } else {
      225:   70:            printf("ERROR: hand does not contain smithy\n");
call    0 returned 100%
      225:   71:            failedTests += 1;
      225:   72:            continue;
        -:   73:        }
        -:   74:        
        -:   75:        
        -:   76:        
        -:   77:    {
        -:   78:        // Smithy should draw a net of 2 cards (draw 3 discard smithy)
     4775:   79:        if (startState.handCount[player] + 2 != endState.handCount[player])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   80:        {
     4775:   81:            failure = true;
     4775:   82:            printf("FAILED TEST (hand count) EXPECTED: %d ACTUAL: %d\n",startState.handCount[player] + 2, endState.handCount[player]);
call    0 returned 100%
        -:   83:        }
        -:   84:       // Discard deck should increase by 1 (smithy discarded)
     4775:   85:       if(startState.discardCount[player] + 1 != endState.discardCount[player]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     4775:   86:           failure = true;
     4775:   87:           printf("FAILED TEST (discard count) EXPECTED: %d ACTUAL: %d\n",startState.discardCount[player] + 1, endState.discardCount[player]);
call    0 returned 100%
        -:   88:       }
        -:   89:
     4775:   90:        if (failure == true)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   91:        {
     4775:   92:            failedTests += 1;
        -:   93:        }
        -:   94:        else
        -:   95:        {
    #####:   96:            passedTests += 1;
        -:   97:        }
        -:   98:    }
        -:   99:        }
        -:  100:
        1:  101:    printf("\n *** TEST RESULTS *** \n");
call    0 returned 100%
        1:  102:    printf("Tests passed: %d\n", passedTests);
call    0 returned 100%
        1:  103:    printf("Tests failed: %d\n", failedTests);
call    0 returned 100%
        1:  104:    return 0;
        -:  105:}
        -:  106:
function smithyPos called 5000 returned 100% blocks executed 100%
     5000:  107:int smithyPos(int p, struct gameState *g) {
        -:  108:	int i;
   118358:  109:	for (i = 0; i < g->handCount[p]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   118133:  110:		if (g->hand[p][i] == smithy)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
     4775:  111:			return i;
        -:  112:	}
      225:  113:	return -1;
        -:  114:}
