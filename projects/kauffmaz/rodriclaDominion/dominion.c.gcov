        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://REFACORED CASES:
        -:    9:
        -:   10://BARON CARD
    #####:   11:int baron_case(int currentPlayer, struct gameState* state, int choice1)//, int i)
        -:   12:{
        -:   13:    //BUG ONE: increase buys by 2
    #####:   14:    state->numBuys++;
    #####:   15:    state->numBuys++;
        -:   16:    //state->numBuys++;//Increase buys by 1!
    #####:   17:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:   18:  int p = 0;//Iterator for hand!
    #####:   19:  int card_not_discarded = 1;//Flag for discard set!
    #####:   20:  while(card_not_discarded){
    #####:   21:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:   22:      state->coins += 4;//Add 4 coins to the amount of coins
    #####:   23:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:   24:      state->discardCount[currentPlayer]++;
    #####:   25:      for (;p < state->handCount[currentPlayer]; p++){
    #####:   26:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:   27:      }
    #####:   28:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:   29:      state->handCount[currentPlayer]--;
    #####:   30:      card_not_discarded = 0;//Exit the loop
        -:   31:    }
    #####:   32:    else if (p > state->handCount[currentPlayer]){
        -:   33:      if(DEBUG) {
        -:   34:        printf("No estate cards in your hand, invalid choice\n");
        -:   35:        printf("Must gain an estate if there are any\n");
        -:   36:      }
    #####:   37:      if (supplyCount(estate, state) > 0){
    #####:   38:        gainCard(estate, state, 0, currentPlayer);
    #####:   39:        state->supplyCount[estate]--;//Decrement estates
    #####:   40:        if (supplyCount(estate, state) == 0){
    #####:   41:    isGameOver(state);
        -:   42:        }
        -:   43:      }
    #####:   44:      card_not_discarded = 0;//Exit the loop
        -:   45:    }
        -:   46:          
        -:   47:    else{
    #####:   48:      p++;//Next card
        -:   49:    }
        -:   50:  }
        -:   51:      }
        -:   52:          
        -:   53:      else{
    #####:   54:  if (supplyCount(estate, state) > 0){
    #####:   55:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:   56:    state->supplyCount[estate]--;//Decrement Estates
    #####:   57:    if (supplyCount(estate, state) == 0){
    #####:   58:      isGameOver(state);
        -:   59:    }
        -:   60:  }
        -:   61:      }
        -:   62:      
        -:   63:      
    #####:   64:      return 0;
        -:   65:}
        -:   66://SMITHY CARD
     4776:   67:int smithy_case(int currentPlayer, struct gameState* state, int handPos)
        -:   68:{
        -:   69:  //+3 cards
        -:   70:  int i;
        -:   71:  //BUG 4: let the user draw 4 cards instead of 3;
        -:   72:  //for (i = 0; i < 3; i++)
    23880:   73:  for (i = 0; i < 4; i++)
        -:   74:	{
    19104:   75:      drawCard(currentPlayer, state);
        -:   76:	}
        -:   77:			
        -:   78:  //discard card from hand
     4776:   79:  discardCard(handPos, currentPlayer, state, 0);
     4776:   80:  return 0;
        -:   81:}
        -:   82://ADVENTURE CARD
        1:   83:int adventurer_case(int currentPlayer, struct gameState* state, int cardDrawn, int drawntreasure, int* temphand, int i, int z)
        -:   84:{
        -:   85:  
        4:   86:  while(drawntreasure<2){
        2:   87:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:   88:	  shuffle(currentPlayer, state);
        -:   89:	}
        2:   90:	drawCard(currentPlayer, state);
        -:   91:  
        -:   92: 
        2:   93:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:   94:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:   95:	  drawntreasure++;
        -:   96:	else{
        -:   97:	   //BUG 2: increases z BEFORE the end
    #####:   98:    z++;
    #####:   99:    temphand[z]=cardDrawn;
    #####:  100:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  101:	  //z++;
        -:  102:  }
        -:  103:  }
        2:  104:  while(z-1>=0){
    #####:  105:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  106:	z=z-1;
        -:  107:  }
        1:  108:  return 0;
        -:  109:		
        -:  110:}
        -:  111://COUNCIL CARD
    #####:  112:int council_case(int currentPlayer, struct gameState* state, int handPos)
        -:  113:{
        -:  114:   //+4 Cards
        -:  115:  int i;
        -:  116:  //BUG 3: Draw 5 cards instead of 4
        -:  117:  //for (i = 0; i < 4; i++)
    #####:  118:  for (i = 0; i < 5; i++)
        -:  119:  	{
    #####:  120:  	  drawCard(currentPlayer, state);
        -:  121:  	}
        -:  122:  			
        -:  123:  //+1 Buy
    #####:  124:  state->numBuys++;
        -:  125:  			
        -:  126:  //Each other player draws a card
    #####:  127:  for (i = 0; i < state->numPlayers; i++)
        -:  128:  	{
    #####:  129:  	  if ( i != currentPlayer )
        -:  130:  	    {
    #####:  131:  	      drawCard(i, state);
        -:  132:  	    }
        -:  133:  	}
        -:  134:  			
        -:  135:  //put played card in played card pile
    #####:  136:  discardCard(handPos, currentPlayer, state, 0);
        -:  137:  			
    #####:  138:  return 0;
        -:  139:}
        -:  140://FEAST CARD
    #####:  141:int feast_case(int currentPlayer, struct gameState* state, int* temphand, int choice1)
        -:  142:{
        -:  143:     int i, x;
        -:  144:    //gain card with cost up to 5
        -:  145:  //Backup hand
    #####:  146:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  147:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  148:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  149:  }
        -:  150:  //Backup hand
        -:  151:
        -:  152:  //Update Coins for Buy
    #####:  153:  updateCoins(currentPlayer, state, 5);
    #####:  154:  x = 1;//Condition to loop on
    #####:  155:  while( x == 1) {//Buy one card
    #####:  156:  if (supplyCount(choice1, state) <= 0){
        -:  157:	  if (DEBUG)
        -:  158:	    printf("None of that card left, sorry!\n");
        -:  159:
        -:  160:	  if (DEBUG){
        -:  161:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  162:	  }
        -:  163:	}
    #####:  164:	else if (state->coins < getCost(choice1)){
    #####:  165:	  printf("That card is too expensive!\n");
        -:  166:
        -:  167:	  if (DEBUG){
        -:  168:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  169:	  }
        -:  170:	}
        -:  171:	else{
        -:  172:
        -:  173:	  if (DEBUG){
        -:  174:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  175:	  }
        -:  176:
    #####:  177:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  178:	  x = 0;//No more buying cards
        -:  179:
        -:  180:	  if (DEBUG){
        -:  181:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  182:	  }
        -:  183:
        -:  184:	}
        -:  185:  }     
        -:  186:
        -:  187:  //Reset Hand
    #####:  188:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  189:	state->hand[currentPlayer][i] = temphand[i];
    #####:  190:	temphand[i] = -1;
        -:  191:  }
        -:  192:  //Reset Hand
        -:  193:  			
    #####:  194:  return 0;
        -:  195:
        -:  196:}
   462062:  197:int compare(const void* a, const void* b) 
        -:  198:{
   462062:  199:  if (*(int*)a > *(int*)b)
    36647:  200:    return 1;
   425415:  201:  if (*(int*)a < *(int*)b)
   119920:  202:    return -1;
   305495:  203:  return 0;
        -:  204:}
        -:  205:
    #####:  206:struct gameState* newGame() 
        -:  207:{
    #####:  208:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  209:  return g;
        -:  210:}
        -:  211:
    #####:  212:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  213:		  int k8, int k9, int k10) {
    #####:  214:  int* k = malloc(10 * sizeof(int));
    #####:  215:  k[0] = k1;
    #####:  216:  k[1] = k2;
    #####:  217:  k[2] = k3;
    #####:  218:  k[3] = k4;
    #####:  219:  k[4] = k5;
    #####:  220:  k[5] = k6;
    #####:  221:  k[6] = k7;
    #####:  222:  k[7] = k8;
    #####:  223:  k[8] = k9;
    #####:  224:  k[9] = k10;
    #####:  225:  return k;
        -:  226:}
        -:  227:
    11506:  228:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  229:		   struct gameState *state) {
        -:  230:
        -:  231:  int i;
        -:  232:  int j;
        -:  233:  int it;			
        -:  234:  //set up random number generator
    11506:  235:  SelectStream(1);
    11506:  236:  PutSeed((long)randomSeed);
        -:  237:  
        -:  238:  //check number of players
    11506:  239:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  240:    {
     2876:  241:      return -1;
        -:  242:    }
        -:  243:
        -:  244:  //set number of players
     8630:  245:  state->numPlayers = numPlayers;
        -:  246:
        -:  247:  //check selected kingdom cards are different
    94930:  248:  for (i = 0; i < 10; i++)
        -:  249:    {
   949300:  250:      for (j = 0; j < 10; j++)
        -:  251:        {
   863000:  252:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  253:	    {
    #####:  254:	      return -1;
        -:  255:	    }
        -:  256:        }
        -:  257:    }
        -:  258:
        -:  259:
        -:  260:  //initialize supply
        -:  261:  ///////////////////////////////
        -:  262:
        -:  263:  //set number of Curse cards
     8630:  264:  if (numPlayers == 2)
        -:  265:    {
     2844:  266:      state->supplyCount[curse] = 10;
        -:  267:    }
     5786:  268:  else if (numPlayers == 3)
        -:  269:    {
     2905:  270:      state->supplyCount[curse] = 20;
        -:  271:    }
        -:  272:  else
        -:  273:    {
     2881:  274:      state->supplyCount[curse] = 30;
        -:  275:    }
        -:  276:
        -:  277:  //set number of Victory cards
     8630:  278:  if (numPlayers == 2)
        -:  279:    {
     2844:  280:      state->supplyCount[estate] = 8;
     2844:  281:      state->supplyCount[duchy] = 8;
     2844:  282:      state->supplyCount[province] = 8;
        -:  283:    }
        -:  284:  else
        -:  285:    {
     5786:  286:      state->supplyCount[estate] = 12;
     5786:  287:      state->supplyCount[duchy] = 12;
     5786:  288:      state->supplyCount[province] = 12;
        -:  289:    }
        -:  290:
        -:  291:  //set number of Treasure cards
     8630:  292:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     8630:  293:  state->supplyCount[silver] = 40;
     8630:  294:  state->supplyCount[gold] = 30;
        -:  295:
        -:  296:  //set number of Kingdom cards
   181230:  297:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  298:    {
  1424040:  299:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  300:	{
  1337728:  301:	  if (kingdomCards[j] == i)
        -:  302:	    {
        -:  303:	      //check if card is a 'Victory' Kingdom card
    86288:  304:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  305:		{
    17268:  306:		  if (numPlayers == 2){ 
     2848:  307:		    state->supplyCount[i] = 8; 
        -:  308:		  }
     5786:  309:		  else{ state->supplyCount[i] = 12; }
        -:  310:		}
        -:  311:	      else
        -:  312:		{
    77654:  313:		  state->supplyCount[i] = 10;
        -:  314:		}
    86288:  315:	      break;
        -:  316:	    }
        -:  317:	  else    //card is not in the set choosen for the game
        -:  318:	    {
  1251440:  319:	      state->supplyCount[i] = -1;
        -:  320:	    }
        -:  321:	}
        -:  322:
        -:  323:    }
        -:  324:
        -:  325:  ////////////////////////
        -:  326:  //supply intilization complete
        -:  327:
        -:  328:  //set player decks
    34557:  329:  for (i = 0; i < numPlayers; i++)
        -:  330:    {
    25927:  331:      state->deckCount[i] = 0;
   103708:  332:      for (j = 0; j < 3; j++)
        -:  333:	{
    77781:  334:	  state->deck[i][j] = estate;
    77781:  335:	  state->deckCount[i]++;
        -:  336:	}
   207416:  337:      for (j = 3; j < 10; j++)
        -:  338:	{
   181489:  339:	  state->deck[i][j] = copper;
   181489:  340:	  state->deckCount[i]++;		
        -:  341:	}
        -:  342:    }
        -:  343:
        -:  344:  //shuffle player decks
    34557:  345:  for (i = 0; i < numPlayers; i++)
        -:  346:    {
    25927:  347:      if ( shuffle(i, state) < 0 )
        -:  348:	{
    #####:  349:	  return -1;
        -:  350:	}
        -:  351:    }
        -:  352:
        -:  353:  //draw player hands
    34557:  354:  for (i = 0; i < numPlayers; i++)
        -:  355:    {  
        -:  356:      //initialize hand size to zero
    25927:  357:      state->handCount[i] = 0;
    25927:  358:      state->discardCount[i] = 0;
        -:  359:      //draw 5 cards
        -:  360:      // for (j = 0; j < 5; j++)
        -:  361:      //	{
        -:  362:      //	  drawCard(i, state);
        -:  363:      //	}
        -:  364:    }
        -:  365:  
        -:  366:  //set embargo tokens to 0 for all supply piles
   241640:  367:  for (i = 0; i <= treasure_map; i++)
        -:  368:    {
   233010:  369:      state->embargoTokens[i] = 0;
        -:  370:    }
        -:  371:
        -:  372:  //initialize first player's turn
     8630:  373:  state->outpostPlayed = 0;
     8630:  374:  state->phase = 0;
     8630:  375:  state->numActions = 1;
     8630:  376:  state->numBuys = 1;
     8630:  377:  state->playedCardCount = 0;
     8630:  378:  state->whoseTurn = 0;
     8630:  379:  state->handCount[state->whoseTurn] = 0;
        -:  380:  //int it; move to top
        -:  381:
        -:  382:  //Moved draw cards to here, only drawing at the start of a turn
    51780:  383:  for (it = 0; it < 5; it++){
    43150:  384:    drawCard(state->whoseTurn, state);
        -:  385:  }
        -:  386:
     8630:  387:  updateCoins(state->whoseTurn, state, 0);
        -:  388:
     8630:  389:  return 0;
        -:  390:}
        -:  391:
    25973:  392:int shuffle(int player, struct gameState *state) {
        -:  393: 
        -:  394:
        -:  395:  int newDeck[MAX_DECK];
    25973:  396:  int newDeckPos = 0;
        -:  397:  int card;
        -:  398:  int i;
        -:  399:
    25973:  400:  if (state->deckCount[player] < 1)
    #####:  401:    return -1;
    25973:  402:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  403:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  404:
   321915:  405:  while (state->deckCount[player] > 0) {
   269969:  406:    card = floor(Random() * state->deckCount[player]);
   269969:  407:    newDeck[newDeckPos] = state->deck[player][card];
   269969:  408:    newDeckPos++;
  1712880:  409:    for (i = card; i < state->deckCount[player]-1; i++) {
  1442911:  410:      state->deck[player][i] = state->deck[player][i+1];
        -:  411:    }
   269969:  412:    state->deckCount[player]--;
        -:  413:  }
   295942:  414:  for (i = 0; i < newDeckPos; i++) {
   269969:  415:    state->deck[player][i] = newDeck[i];
   269969:  416:    state->deckCount[player]++;
        -:  417:  }
        -:  418:
    25973:  419:  return 0;
        -:  420:}
        -:  421:
     9545:  422:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  423:{	
        -:  424:  int card;
     9545:  425:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  426:
        -:  427:  //check if it is the right phase
     9545:  428:  if (state->phase != 0)
        -:  429:    {
    #####:  430:      return -1;
        -:  431:    }
        -:  432:	
        -:  433:  //check if player has enough actions
     9545:  434:  if ( state->numActions < 1 )
        -:  435:    {
    #####:  436:      return -1;
        -:  437:    }
        -:  438:	
        -:  439:  //get card played
     9545:  440:  card = handCard(handPos, state);
        -:  441:	
        -:  442:  //check if selected card is an action
     9545:  443:  if ( card < adventurer || card > treasure_map )
        -:  444:    {
    #####:  445:      return -1;
        -:  446:    }
        -:  447:	
        -:  448:  //play card
     9545:  449:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  450:    {
    #####:  451:      return -1;
        -:  452:    }
        -:  453:	
        -:  454:  //reduce number of actions
     9545:  455:  state->numActions--;
        -:  456:
        -:  457:  //update coins (Treasure cards may be added with card draws)
     9545:  458:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  459:	
     9545:  460:  return 0;
        -:  461:}
        -:  462:
    #####:  463:int buyCard(int supplyPos, struct gameState *state) {
        -:  464:  int who;
        -:  465:  if (DEBUG){
        -:  466:    printf("Entering buyCard...\n");
        -:  467:  }
        -:  468:
        -:  469:  // I don't know what to do about the phase thing.
        -:  470:
    #####:  471:  who = state->whoseTurn;
        -:  472:
    #####:  473:  if (state->numBuys < 1){
        -:  474:    if (DEBUG)
        -:  475:      printf("You do not have any buys left\n");
    #####:  476:    return -1;
    #####:  477:  } else if (supplyCount(supplyPos, state) <1){
        -:  478:    if (DEBUG)
        -:  479:      printf("There are not any of that type of card left\n");
    #####:  480:    return -1;
    #####:  481:  } else if (state->coins < getCost(supplyPos)){
        -:  482:    if (DEBUG) 
        -:  483:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  484:    return -1;
        -:  485:  } else {
    #####:  486:    state->phase=1;
        -:  487:    //state->supplyCount[supplyPos]--;
    #####:  488:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  489:  
    #####:  490:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  491:    state->numBuys--;
        -:  492:    if (DEBUG)
        -:  493:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  494:  }
        -:  495:
        -:  496:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  497:  //state->discardCount[who]++;
        -:  498:    
    #####:  499:  return 0;
        -:  500:}
        -:  501:
     3000:  502:int numHandCards(struct gameState *state) {
     3000:  503:  return state->handCount[ whoseTurn(state) ];
        -:  504:}
        -:  505:
     9545:  506:int handCard(int handPos, struct gameState *state) {
     9545:  507:  int currentPlayer = whoseTurn(state);
     9545:  508:  return state->hand[currentPlayer][handPos];
        -:  509:}
        -:  510:
    #####:  511:int supplyCount(int card, struct gameState *state) {
    #####:  512:  return state->supplyCount[card];
        -:  513:}
        -:  514:
      303:  515:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  516:  int i;
      303:  517:  int count = 0;
        -:  518:
    30321:  519:  for (i = 0; i < state->deckCount[player]; i++)
        -:  520:    {
    30018:  521:      if (state->deck[player][i] == card) count++;
        -:  522:    }
        -:  523:
    30321:  524:  for (i = 0; i < state->handCount[player]; i++)
        -:  525:    {
    30018:  526:      if (state->hand[player][i] == card) count++;
        -:  527:    }
        -:  528:
    30321:  529:  for (i = 0; i < state->discardCount[player]; i++)
        -:  530:    {
    30018:  531:      if (state->discard[player][i] == card) count++;
        -:  532:    }
        -:  533:
      303:  534:  return count;
        -:  535:}
        -:  536:
    22090:  537:int whoseTurn(struct gameState *state) {
    22090:  538:  return state->whoseTurn;
        -:  539:}
        -:  540:
    #####:  541:int endTurn(struct gameState *state) {
        -:  542:  int k;
        -:  543:  int i;
    #####:  544:  int currentPlayer = whoseTurn(state);
        -:  545:  
        -:  546:  //Discard hand
    #####:  547:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  548:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  549:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  550:  }
    #####:  551:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  552:    
        -:  553:  //Code for determining the player
    #####:  554:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  555:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  556:  }
        -:  557:  else{
    #####:  558:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  559:  }
        -:  560:
    #####:  561:  state->outpostPlayed = 0;
    #####:  562:  state->phase = 0;
    #####:  563:  state->numActions = 1;
    #####:  564:  state->coins = 0;
    #####:  565:  state->numBuys = 1;
    #####:  566:  state->playedCardCount = 0;
    #####:  567:  state->handCount[state->whoseTurn] = 0;
        -:  568:
        -:  569:  //int k; move to top
        -:  570:  //Next player draws hand
    #####:  571:  for (k = 0; k < 5; k++){
    #####:  572:    drawCard(state->whoseTurn, state);//Draw a card
        -:  573:  }
        -:  574:
        -:  575:  //Update money
    #####:  576:  updateCoins(state->whoseTurn, state , 0);
        -:  577:
    #####:  578:  return 0;
        -:  579:}
        -:  580:
      504:  581:int isGameOver(struct gameState *state) {
        -:  582:  int i;
        -:  583:  int j;
        -:  584:	
        -:  585:  //if stack of Province cards is empty, the game ends
      504:  586:  if (state->supplyCount[province] == 0)
        -:  587:    {
        1:  588:      return 1;
        -:  589:    }
        -:  590:
        -:  591:  //if three supply pile are at 0, the game ends
      503:  592:  j = 0;
    13078:  593:  for (i = 0; i < 25; i++)
        -:  594:    {
    12575:  595:      if (state->supplyCount[i] == 0)
        -:  596:	{
        6:  597:	  j++;
        -:  598:	}
        -:  599:    }
      503:  600:  if ( j >= 3)
        -:  601:    {
        1:  602:      return 1;
        -:  603:    }
        -:  604:
      502:  605:  return 0;
        -:  606:}
        -:  607:
        5:  608:int scoreFor (int player, struct gameState *state) {
        -:  609:
        -:  610:  int i;
        5:  611:  int score = 0;
        -:  612:  //score from hand
      129:  613:  for (i = 0; i < state->handCount[player]; i++)
        -:  614:    {
      124:  615:      if (state->hand[player][i] == curse) { score = score - 1; };
      124:  616:      if (state->hand[player][i] == estate) { score = score + 1; };
      124:  617:      if (state->hand[player][i] == duchy) { score = score + 3; };
      124:  618:      if (state->hand[player][i] == province) { score = score + 6; };
      124:  619:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      124:  620:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  621:    }
        -:  622:
        -:  623:  //score from discard
      129:  624:  for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
      124:  626:      if (state->discard[player][i] == curse) { score = score - 1; };
      124:  627:      if (state->discard[player][i] == estate) { score = score + 1; };
      124:  628:      if (state->discard[player][i] == duchy) { score = score + 3; };
      124:  629:      if (state->discard[player][i] == province) { score = score + 6; };
      124:  630:      if (state->discard[player][i] == great_hall) { score = score + 1; };
      124:  631:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  632:    }
        -:  633:
        -:  634:  //score from deck
      129:  635:  for (i = 0; i < state->discardCount[player]; i++)
        -:  636:    {
      124:  637:      if (state->deck[player][i] == curse) { score = score - 1; };
      124:  638:      if (state->deck[player][i] == estate) { score = score + 1; };
      124:  639:      if (state->deck[player][i] == duchy) { score = score + 3; };
      124:  640:      if (state->deck[player][i] == province) { score = score + 6; };
      124:  641:      if (state->deck[player][i] == great_hall) { score = score + 1; };
      124:  642:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  643:    }
        -:  644:
        5:  645:  return score;
        -:  646:}
        -:  647:
    #####:  648:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  649:  int i;	
        -:  650:  int j;
        -:  651:  int highScore;
        -:  652:  int currentPlayer;
        -:  653:
        -:  654:  //get score for each player
    #####:  655:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  656:    {
        -:  657:      //set unused player scores to -9999
    #####:  658:      if (i >= state->numPlayers)
        -:  659:	{
    #####:  660:	  players[i] = -9999;
        -:  661:	}
        -:  662:      else
        -:  663:	{
    #####:  664:	  players[i] = scoreFor (i, state);
        -:  665:	}
        -:  666:    }
        -:  667:
        -:  668:  //find highest score
    #####:  669:  j = 0;
    #####:  670:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  671:    {
    #####:  672:      if (players[i] > players[j])
        -:  673:	{
    #####:  674:	  j = i;
        -:  675:	}
        -:  676:    }
    #####:  677:  highScore = players[j];
        -:  678:
        -:  679:  //add 1 to players who had less turns
    #####:  680:  currentPlayer = whoseTurn(state);
    #####:  681:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  682:    {
    #####:  683:      if ( players[i] == highScore && i > currentPlayer )
        -:  684:	{
    #####:  685:	  players[i]++;
        -:  686:	}
        -:  687:    }
        -:  688:
        -:  689:  //find new highest score
    #####:  690:  j = 0;
    #####:  691:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  692:    {
    #####:  693:      if ( players[i] > players[j] )
        -:  694:	{
    #####:  695:	  j = i;
        -:  696:	}
        -:  697:    }
    #####:  698:  highScore = players[j];
        -:  699:
        -:  700:  //set winners in array to 1 and rest to 0
    #####:  701:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  702:    {
    #####:  703:      if ( players[i] == highScore )
        -:  704:	{
    #####:  705:	  players[i] = 1;
        -:  706:	}
        -:  707:      else
        -:  708:	{
    #####:  709:	  players[i] = 0;
        -:  710:	}
        -:  711:    }
        -:  712:
    #####:  713:  return 0;
        -:  714:}
        -:  715:
    67023:  716:int drawCard(int player, struct gameState *state)
        -:  717:{	int count;
        -:  718:  int deckCounter;
    67023:  719:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  720:    
        -:  721:    //Step 1 Shuffle the discard pile back into a deck
        -:  722:    int i;
        -:  723:    //Move discard to deck
    10745:  724:    for (i = 0; i < state->discardCount[player];i++){
    10699:  725:      state->deck[player][i] = state->discard[player][i];
    10699:  726:      state->discard[player][i] = -1;
        -:  727:    }
        -:  728:
       46:  729:    state->deckCount[player] = state->discardCount[player];
       46:  730:    state->discardCount[player] = 0;//Reset discard
        -:  731:
        -:  732:    //Shufffle the deck
       46:  733:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  734:   
        -:  735:    if (DEBUG){//Debug statements
        -:  736:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  737:    }
        -:  738:    
       46:  739:    state->discardCount[player] = 0;
        -:  740:
        -:  741:    //Step 2 Draw Card
       46:  742:    count = state->handCount[player];//Get current player's hand count
        -:  743:    
        -:  744:    if (DEBUG){//Debug statements
        -:  745:      printf("Current hand count: %d\n", count);
        -:  746:    }
        -:  747:    
       46:  748:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  749:
       46:  750:    if (deckCounter == 0)
    #####:  751:      return -1;
        -:  752:
       46:  753:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       46:  754:    state->deckCount[player]--;
       46:  755:    state->handCount[player]++;//Increment hand count
        -:  756:  }
        -:  757:
        -:  758:  else{
    66977:  759:    int count = state->handCount[player];//Get current hand count for player
        -:  760:    int deckCounter;
        -:  761:    if (DEBUG){//Debug statements
        -:  762:      printf("Current hand count: %d\n", count);
        -:  763:    }
        -:  764:
    66977:  765:    deckCounter = state->deckCount[player];//Create holder for the deck count
    66977:  766:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    66977:  767:    state->deckCount[player]--;
    66977:  768:    state->handCount[player]++;//Increment hand count
        -:  769:  }
        -:  770:
    67023:  771:  return 0;
        -:  772:}
        -:  773:
       55:  774:int getCost(int cardNumber)
        -:  775:{
       55:  776:  switch( cardNumber ) 
        -:  777:    {
        -:  778:    case curse:
        2:  779:      return 0;
        -:  780:    case estate:
        2:  781:      return 2;
        -:  782:    case duchy:
        2:  783:      return 5;
        -:  784:    case province:
        2:  785:      return 8;
        -:  786:    case copper:
        2:  787:      return 0;
        -:  788:    case silver:
        2:  789:      return 3;
        -:  790:    case gold:
        2:  791:      return 6;
        -:  792:    case adventurer:
        2:  793:      return 6;
        -:  794:    case council_room:
        2:  795:      return 5;
        -:  796:    case feast:
        2:  797:      return 4;
        -:  798:    case gardens:
        2:  799:      return 4;
        -:  800:    case mine:
        2:  801:      return 5;
        -:  802:    case remodel:
        2:  803:      return 4;
        -:  804:    case smithy:
        2:  805:      return 4;
        -:  806:    case village:
        2:  807:      return 3;
        -:  808:    case baron:
        2:  809:      return 4;
        -:  810:    case great_hall:
        2:  811:      return 3;
        -:  812:    case minion:
        2:  813:      return 5;
        -:  814:    case steward:
        2:  815:      return 3;
        -:  816:    case tribute:
        2:  817:      return 5;
        -:  818:    case ambassador:
        2:  819:      return 3;
        -:  820:    case cutpurse:
        2:  821:      return 4;
        -:  822:    case embargo: 
        2:  823:      return 2;
        -:  824:    case outpost:
        2:  825:      return 5;
        -:  826:    case salvager:
        2:  827:      return 4;
        -:  828:    case sea_hag:
        2:  829:      return 4;
        -:  830:    case treasure_map:
        2:  831:      return 4;
        -:  832:    }
        -:  833:	
        1:  834:  return -1;
        -:  835:}
        -:  836:
     9545:  837:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  838:{
        -:  839:  int i;
        -:  840:  int j;
        -:  841:  int k;
        -:  842:  int x;
        -:  843:  int index;
     9545:  844:  int currentPlayer = whoseTurn(state);
     9545:  845:  int nextPlayer = currentPlayer + 1;
        -:  846:
     9545:  847:  int tributeRevealedCards[2] = {-1, -1};
        -:  848:  int temphand[MAX_HAND];// moved above the if statement
     9545:  849:  int drawntreasure=0;
        -:  850:  int cardDrawn;
     9545:  851:  int z = 0;// this is the counter for the temp hand
     9545:  852:  if (nextPlayer > (state->numPlayers - 1)){
     3133:  853:    nextPlayer = 0;
        -:  854:  }
        -:  855:  
        -:  856:	
        -:  857:  //uses switch to select card and perform actions
     9545:  858:  switch( card ) 
        -:  859:    {
        -:  860:    int return_adventurer=0;
        -:  861:    case adventurer:
        1:  862:      return_adventurer=adventurer_case(currentPlayer, state, cardDrawn, drawntreasure, temphand, i, z);
        1:  863:      return return_adventurer;
        -:  864:     int return_council=0;
        -:  865:     case council_room:
    #####:  866:      return_council=council_case(currentPlayer, state, handPos);
    #####:  867:      return return_council;
        -:  868:
        -:  869:    int return_feast=0;
        -:  870:    case feast:
    #####:  871:      return_feast=feast_case(currentPlayer, state, temphand, choice1);
    #####:  872:      return return_feast;
        -:  873:     			
        -:  874:    case gardens:
    #####:  875:      return -1;
        -:  876:			
        -:  877:    case mine:
    #####:  878:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  879:
    #####:  880:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  881:	{
    #####:  882:	  return -1;
        -:  883:	}
        -:  884:		
    #####:  885:      if (choice2 > treasure_map || choice2 < curse)
        -:  886:	{
    #####:  887:	  return -1;
        -:  888:	}
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  891:	{
    #####:  892:	  return -1;
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 2, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
        -:  907:	    }
        -:  908:	}
        -:  909:			
    #####:  910:      return 0;
        -:  911:			
        -:  912:    case remodel:
    #####:  913:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  914:
    #####:  915:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  916:	{
    #####:  917:	  return -1;
        -:  918:	}
        -:  919:
    #####:  920:      gainCard(choice2, state, 0, currentPlayer);
        -:  921:
        -:  922:      //discard card from hand
    #####:  923:      discardCard(handPos, currentPlayer, state, 0);
        -:  924:
        -:  925:      //discard trashed card
    #####:  926:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  927:	{
    #####:  928:	  if (state->hand[currentPlayer][i] == j)
        -:  929:	    {
    #####:  930:	      discardCard(i, currentPlayer, state, 0);			
    #####:  931:	      break;
        -:  932:	    }
        -:  933:	}
        -:  934:
        -:  935:
    #####:  936:      return 0;
        -:  937:		int smithy_return=0;
        -:  938:    case smithy:
     4776:  939:      smithy_return=smithy_case(currentPlayer, state, handPos);
     4776:  940:      return smithy_return;
        -:  941:      //+3 Cards
        -:  942:    		
        -:  943:    case village:
        -:  944:      //+1 Card
    #####:  945:      drawCard(currentPlayer, state);
        -:  946:			
        -:  947:      //+2 Actions
    #####:  948:      state->numActions = state->numActions + 2;
        -:  949:			
        -:  950:      //discard played card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
    #####:  952:      return 0;
        -:  953:		
        -:  954:    int return_baron=0;
        -:  955:    case baron:
    #####:  956:      return_baron=baron_case(currentPlayer, state, choice1);//, i);
    #####:  957:      return return_baron;
        -:  958:     
        -:  959:		
        -:  960:    case great_hall:
        -:  961:      //+1 Card
     4767:  962:      drawCard(currentPlayer, state);
        -:  963:			
        -:  964:      //+1 Actions
     4767:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
     4767:  968:      discardCard(handPos, currentPlayer, state, 0);
     4767:  969:      return 0;
        -:  970:		
        -:  971:    case minion:
        -:  972:      //+1 action
    #####:  973:      state->numActions++;
        -:  974:			
        -:  975:      //discard card from hand
    #####:  976:      discardCard(handPos, currentPlayer, state, 0);
        -:  977:			
    #####:  978:      if (choice1)		//+2 coins
        -:  979:	{
    #####:  980:	  state->coins = state->coins + 2;
        -:  981:	}
        -:  982:			
    #####:  983:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  984:	{
        -:  985:	  //discard hand
    #####:  986:	  while(numHandCards(state) > 0)
        -:  987:	    {
    #####:  988:	      discardCard(handPos, currentPlayer, state, 0);
        -:  989:	    }
        -:  990:				
        -:  991:	  //draw 4
    #####:  992:	  for (i = 0; i < 4; i++)
        -:  993:	    {
    #####:  994:	      drawCard(currentPlayer, state);
        -:  995:	    }
        -:  996:				
        -:  997:	  //other players discard hand and redraw if hand size > 4
    #####:  998:	  for (i = 0; i < state->numPlayers; i++)
        -:  999:	    {
    #####: 1000:	      if (i != currentPlayer)
        -: 1001:		{
    #####: 1002:		  if ( state->handCount[i] > 4 )
        -: 1003:		    {
        -: 1004:		      //discard hand
    #####: 1005:		      while( state->handCount[i] > 0 )
        -: 1006:			{
    #####: 1007:			  discardCard(handPos, i, state, 0);
        -: 1008:			}
        -: 1009:							
        -: 1010:		      //draw 4
    #####: 1011:		      for (j = 0; j < 4; j++)
        -: 1012:			{
    #####: 1013:			  drawCard(i, state);
        -: 1014:			}
        -: 1015:		    }
        -: 1016:		}
        -: 1017:	    }
        -: 1018:				
        -: 1019:	}
    #####: 1020:      return 0;
        -: 1021:		
        -: 1022:    case steward:
    #####: 1023:      if (choice1 == 1)
        -: 1024:	{
        -: 1025:	  //+2 cards
    #####: 1026:	  drawCard(currentPlayer, state);
    #####: 1027:	  drawCard(currentPlayer, state);
        -: 1028:	}
    #####: 1029:      else if (choice1 == 2)
        -: 1030:	{
        -: 1031:	  //+2 coins
    #####: 1032:	  state->coins = state->coins + 2;
        -: 1033:	}
        -: 1034:      else
        -: 1035:	{
        -: 1036:	  //trash 2 cards in hand
    #####: 1037:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1038:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1039:	}
        -: 1040:			
        -: 1041:      //discard card from hand
    #####: 1042:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1043:      return 0;
        -: 1044:		
        -: 1045:    case tribute:
    #####: 1046:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1047:	if (state->deckCount[nextPlayer] > 0){
    #####: 1048:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	  state->deckCount[nextPlayer]--;
        -: 1050:	}
    #####: 1051:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1052:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1053:	  state->discardCount[nextPlayer]--;
        -: 1054:	}
        -: 1055:	else{
        -: 1056:	  //No Card to Reveal
        -: 1057:	  if (DEBUG){
        -: 1058:	    printf("No cards to reveal\n");
        -: 1059:	  }
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
        -: 1063:      else{
    #####: 1064:	if (state->deckCount[nextPlayer] == 0){
    #####: 1065:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1066:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1067:	    state->deckCount[nextPlayer]++;
    #####: 1068:	    state->discard[nextPlayer][i] = -1;
    #####: 1069:	    state->discardCount[nextPlayer]--;
        -: 1070:	  }
        -: 1071:			    
    #####: 1072:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1073:	} 
    #####: 1074:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1076:	state->deckCount[nextPlayer]--;
    #####: 1077:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1078:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1079:	state->deckCount[nextPlayer]--;
        -: 1080:      }    
        -: 1081:		       
    #####: 1082:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1083:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1084:	state->playedCardCount++;
    #####: 1085:	tributeRevealedCards[1] = -1;
        -: 1086:      }
        -: 1087:
    #####: 1088:      for (i = 0; i <= 2; i ++){
    #####: 1089:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1090:	  state->coins += 2;
        -: 1091:	}
        -: 1092:		    
    #####: 1093:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1094:	  drawCard(currentPlayer, state);
    #####: 1095:	  drawCard(currentPlayer, state);
        -: 1096:	}
        -: 1097:	else{//Action Card
    #####: 1098:	  state->numActions = state->numActions + 2;
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case ambassador:
    #####: 1105:      j = 0;		//used to check if player has enough cards to discard
        -: 1106:
    #####: 1107:      if (choice2 > 2 || choice2 < 0)
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
    #####: 1112:      if (choice1 == handPos)
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1118:	{
    #####: 1119:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1120:	    {
    #####: 1121:	      j++;
        -: 1122:	    }
        -: 1123:	}
    #####: 1124:      if (j < choice2)
        -: 1125:	{
    #####: 1126:	  return -1;				
        -: 1127:	}
        -: 1128:
        -: 1129:      if (DEBUG) 
        -: 1130:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1131:
        -: 1132:      //increase supply count for choosen card by amount being discarded
    #####: 1133:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1134:			
        -: 1135:      //each other player gains a copy of revealed card
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
        -: 1139:	    {
    #####: 1140:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1141:	    }
        -: 1142:	}
        -: 1143:
        -: 1144:      //discard played card from hand
    #####: 1145:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1146:
        -: 1147:      //trash copies of cards returned to supply
    #####: 1148:      for (j = 0; j < choice2; j++)
        -: 1149:	{
    #####: 1150:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1151:	    {
    #####: 1152:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1153:		{
    #####: 1154:		  discardCard(i, currentPlayer, state, 1);
    #####: 1155:		  break;
        -: 1156:		}
        -: 1157:	    }
        -: 1158:	}			
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:		
        -: 1162:    case cutpurse:
        -: 1163:
        1: 1164:      updateCoins(currentPlayer, state, 2);
        3: 1165:      for (i = 0; i < state->numPlayers; i++)
        -: 1166:	{
        2: 1167:	  if (i != currentPlayer)
        -: 1168:	    {
        2: 1169:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1170:		{
        2: 1171:		  if (state->hand[i][j] == copper)
        -: 1172:		    {
        1: 1173:		      discardCard(j, i, state, 0);
        1: 1174:		      break;
        -: 1175:		    }
        1: 1176:		  if (j == state->handCount[i])
        -: 1177:		    {
    #####: 1178:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1179:			{
        -: 1180:			  if (DEBUG)
        -: 1181:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1182:			}	
    #####: 1183:		      break;
        -: 1184:		    }		
        -: 1185:		}
        -: 1186:					
        -: 1187:	    }
        -: 1188:				
        -: 1189:	}				
        -: 1190:
        -: 1191:      //discard played card from hand
        1: 1192:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1193:
        1: 1194:      return 0;
        -: 1195:
        -: 1196:		
        -: 1197:    case embargo: 
        -: 1198:      //+2 Coins
    #####: 1199:      state->coins = state->coins + 2;
        -: 1200:			
        -: 1201:      //see if selected pile is in play
    #####: 1202:      if ( state->supplyCount[choice1] == -1 )
        -: 1203:	{
    #####: 1204:	  return -1;
        -: 1205:	}
        -: 1206:			
        -: 1207:      //add embargo token to selected supply pile
    #####: 1208:      state->embargoTokens[choice1]++;
        -: 1209:			
        -: 1210:      //trash card
    #####: 1211:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1212:      return 0;
        -: 1213:		
        -: 1214:    case outpost:
        -: 1215:      //set outpost flag
    #####: 1216:      state->outpostPlayed++;
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case salvager:
        -: 1223:      //+1 buy
    #####: 1224:      state->numBuys++;
        -: 1225:			
    #####: 1226:      if (choice1)
        -: 1227:	{
        -: 1228:	  //gain coins equal to trashed card
    #####: 1229:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1230:	  //trash card
    #####: 1231:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1232:	}
        -: 1233:			
        -: 1234:      //discard card
    #####: 1235:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1236:      return 0;
        -: 1237:		
        -: 1238:    case sea_hag:
    #####: 1239:      for (i = 0; i < state->numPlayers; i++){
    #####: 1240:	if (i != currentPlayer){
    #####: 1241:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1242:	  state->discardCount[i]++;
    #####: 1243:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1244:	}
        -: 1245:      }
    #####: 1246:      return 0;
        -: 1247:		
        -: 1248:    case treasure_map:
        -: 1249:      //search hand for another treasure_map
    #####: 1250:      index = -1;
    #####: 1251:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1252:	{
    #####: 1253:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1254:	    {
    #####: 1255:	      index = i;
    #####: 1256:	      break;
        -: 1257:	    }
        -: 1258:	}
    #####: 1259:      if (index > -1)
        -: 1260:	{
        -: 1261:	  //trash both treasure cards
    #####: 1262:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1263:	  discardCard(index, currentPlayer, state, 1);
        -: 1264:
        -: 1265:	  //gain 4 Gold cards
    #####: 1266:	  for (i = 0; i < 4; i++)
        -: 1267:	    {
    #####: 1268:	      gainCard(gold, state, 1, currentPlayer);
        -: 1269:	    }
        -: 1270:				
        -: 1271:	  //return success
    #####: 1272:	  return 1;
        -: 1273:	}
        -: 1274:			
        -: 1275:      //no second treasure_map found in hand
    #####: 1276:      return -1;
        -: 1277:    }
        -: 1278:	
    #####: 1279:  return -1;
        -: 1280:}
        -: 1281:
     9545: 1282:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1283:{
        -: 1284:	
        -: 1285:  //if card is not trashed, added to Played pile 
     9545: 1286:  if (trashFlag < 1)
        -: 1287:    {
        -: 1288:      //add card to played pile
     9545: 1289:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     9545: 1290:      state->playedCardCount++;
        -: 1291:    }
        -: 1292:	
        -: 1293:  //set played card to -1
     9545: 1294:  state->hand[currentPlayer][handPos] = -1;
        -: 1295:	
        -: 1296:  //remove card from player's hand
     9545: 1297:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1298:    {
        -: 1299:      //reduce number of cards in hand
    #####: 1300:      state->handCount[currentPlayer]--;
        -: 1301:    }
     9545: 1302:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
    #####: 1305:      state->handCount[currentPlayer]--;
        -: 1306:    }
        -: 1307:  else 	
        -: 1308:    {
        -: 1309:      //replace discarded card with last card in hand
     9545: 1310:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1311:      //set last card to -1
     9545: 1312:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1313:      //reduce number of cards in hand
     9545: 1314:      state->handCount[currentPlayer]--;
        -: 1315:    }
        -: 1316:	
     9545: 1317:  return 0;
        -: 1318:}
        -: 1319:
    #####: 1320:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1321:{
        -: 1322:  //Note: supplyPos is enum of choosen card
        -: 1323:	
        -: 1324:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1325:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1326:    {
    #####: 1327:      return -1;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //added card for [whoseTurn] current player:
        -: 1331:  // toFlag = 0 : add to discard
        -: 1332:  // toFlag = 1 : add to deck
        -: 1333:  // toFlag = 2 : add to hand
        -: 1334:
    #####: 1335:  if (toFlag == 1)
        -: 1336:    {
    #####: 1337:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1338:      state->deckCount[player]++;
        -: 1339:    }
    #####: 1340:  else if (toFlag == 2)
        -: 1341:    {
    #####: 1342:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1343:      state->handCount[player]++;
        -: 1344:    }
        -: 1345:  else
        -: 1346:    {
    #####: 1347:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1348:      state->discardCount[player]++;
        -: 1349:    }
        -: 1350:	
        -: 1351:  //decrease number in supply pile
    #####: 1352:  state->supplyCount[supplyPos]--;
        -: 1353:	 
    #####: 1354:  return 0;
        -: 1355:}
        -: 1356:
    18180: 1357:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1358:{
        -: 1359:  int i;
        -: 1360:	
        -: 1361:  //reset coin count
    18180: 1362:  state->coins = 0;
        -: 1363:
        -: 1364:  //add coins for each Treasure card in player's hand
  2616054: 1365:  for (i = 0; i < state->handCount[player]; i++)
        -: 1366:    {
  2597874: 1367:      if (state->hand[player][i] == copper)
        -: 1368:	{
   136977: 1369:	  state->coins += 1;
        -: 1370:	}
  2460897: 1371:      else if (state->hand[player][i] == silver)
        -: 1372:	{
   101658: 1373:	  state->coins += 2;
        -: 1374:	}
  2359239: 1375:      else if (state->hand[player][i] == gold)
        -: 1376:	{
   102341: 1377:	  state->coins += 3;
        -: 1378:	}	
        -: 1379:    }	
        -: 1380:
        -: 1381:  //add bonus
    18180: 1382:  state->coins += bonus;
        -: 1383:
    18180: 1384:  return 0;
        -: 1385:}
        -: 1386:
        -: 1387:
        -: 1388://end of dominion.c
        -: 1389:
